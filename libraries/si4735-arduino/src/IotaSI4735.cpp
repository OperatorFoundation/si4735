//
// Generated by iota-wrapper on 10/02/25
//

#include "IotaSI4735.h"
#include <ion-cpp.h>
#include <iota-cpp.h>
#include <nouns/noun.h>

void IotaSI4735::initialize(EffectsProvider* effects_register, SI4735* instance_ptr)
{
  instance = instance_ptr;

  // SI4735: Nilads
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::RdsInit, IotaSI4735::RdsInit);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::analogPowerUp, IotaSI4735::analogPowerUp);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::clearRdsBuffer, IotaSI4735::clearRdsBuffer);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::frequencyDown, IotaSI4735::frequencyDown);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::frequencyUp, IotaSI4735::frequencyUp);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getAutomaticGainControl, IotaSI4735::getAutomaticGainControl);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getFirmware, IotaSI4735::getFirmware);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getStatus, IotaSI4735::getStatus);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::patchPowerUp, IotaSI4735::patchPowerUp);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::patchPowerUpNBFM, IotaSI4735::patchPowerUpNBFM);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::powerDown, IotaSI4735::powerDown);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::radioPowerUp, IotaSI4735::radioPowerUp);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::rdsBeginQuery, IotaSI4735::rdsBeginQuery);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::rdsClearFifo, IotaSI4735::rdsClearFifo);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::rdsClearInterrupt, IotaSI4735::rdsClearInterrupt);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::reset, IotaSI4735::reset);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::resetEndIndicatorGroupA, IotaSI4735::resetEndIndicatorGroupA);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::resetEndIndicatorGroupB, IotaSI4735::resetEndIndicatorGroupB);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::seekNextStation, IotaSI4735::seekNextStation);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::seekPreviousStation, IotaSI4735::seekPreviousStation);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::seekStationDown, IotaSI4735::seekStationDown);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::seekStationUp, IotaSI4735::seekStationUp);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::setAvcAmDefaultGain, IotaSI4735::setAvcAmDefaultGain);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::setAvcAmMinGain, IotaSI4735::setAvcAmMinGain);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::setFmStereoOff, IotaSI4735::setFmStereoOff);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::setFmStereoOn, IotaSI4735::setFmStereoOn);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::setFrequencyDown, IotaSI4735::setFrequencyDown);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::setFrequencyUp, IotaSI4735::setFrequencyUp);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::setI2CFastMode, IotaSI4735::setI2CFastMode);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::setI2CLowSpeedMode, IotaSI4735::setI2CLowSpeedMode);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::setI2CStandardMode, IotaSI4735::setI2CStandardMode);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::setVolumeDown, IotaSI4735::setVolumeDown);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::setVolumeUp, IotaSI4735::setVolumeUp);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::ssbPowerUp, IotaSI4735::ssbPowerUp);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::volumeDown, IotaSI4735::volumeDown);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::volumeUp, IotaSI4735::volumeUp);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::waitToSend, IotaSI4735::waitToSend);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getACFIndicator, IotaSI4735::getACFIndicator);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getAgcGainIndex, IotaSI4735::getAgcGainIndex);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getAntennaTuningCapacitor, IotaSI4735::getAntennaTuningCapacitor);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getBandLimit, IotaSI4735::getBandLimit);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getCurrentAfcRailIndicator, IotaSI4735::getCurrentAfcRailIndicator);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getCurrentAvcAmMaxGain, IotaSI4735::getCurrentAvcAmMaxGain);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getCurrentBlendDetectInterrupt, IotaSI4735::getCurrentBlendDetectInterrupt);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getCurrentFrequency, IotaSI4735::getCurrentFrequency);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getCurrentMultipath, IotaSI4735::getCurrentMultipath);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getCurrentMultipathDetectHigh, IotaSI4735::getCurrentMultipathDetectHigh);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getCurrentMultipathDetectLow, IotaSI4735::getCurrentMultipathDetectLow);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getCurrentPilot, IotaSI4735::getCurrentPilot);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getCurrentRSSI, IotaSI4735::getCurrentRSSI);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getCurrentRssiDetectHigh, IotaSI4735::getCurrentRssiDetectHigh);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getCurrentRssiDetectLow, IotaSI4735::getCurrentRssiDetectLow);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getCurrentSNR, IotaSI4735::getCurrentSNR);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getCurrentSignedFrequencyOffset, IotaSI4735::getCurrentSignedFrequencyOffset);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getCurrentSnrDetectHigh, IotaSI4735::getCurrentSnrDetectHigh);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getCurrentSnrDetectLow, IotaSI4735::getCurrentSnrDetectLow);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getCurrentSoftMuteIndicator, IotaSI4735::getCurrentSoftMuteIndicator);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getCurrentStereoBlend, IotaSI4735::getCurrentStereoBlend);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getCurrentValidChannel, IotaSI4735::getCurrentValidChannel);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getCurrentVolume, IotaSI4735::getCurrentVolume);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getEndIndicatorGroupA, IotaSI4735::getEndIndicatorGroupA);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getEndIndicatorGroupB, IotaSI4735::getEndIndicatorGroupB);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getFirmwareCHIPREV, IotaSI4735::getFirmwareCHIPREV);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getFirmwareCMPMAJOR, IotaSI4735::getFirmwareCMPMAJOR);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getFirmwareCMPMINOR, IotaSI4735::getFirmwareCMPMINOR);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getFirmwareFWMAJOR, IotaSI4735::getFirmwareFWMAJOR);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getFirmwareFWMINOR, IotaSI4735::getFirmwareFWMINOR);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getFirmwarePATCHH, IotaSI4735::getFirmwarePATCHH);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getFirmwarePATCHL, IotaSI4735::getFirmwarePATCHL);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getFirmwarePN, IotaSI4735::getFirmwarePN);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getFrequency, IotaSI4735::getFrequency);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getGroupLost, IotaSI4735::getGroupLost);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getNumRdsFifoUsed, IotaSI4735::getNumRdsFifoUsed);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getRadioDataSystemInterrupt, IotaSI4735::getRadioDataSystemInterrupt);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getRdsFlagAB, IotaSI4735::getRdsFlagAB);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getRdsGroupType, IotaSI4735::getRdsGroupType);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getRdsNewBlockA, IotaSI4735::getRdsNewBlockA);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getRdsNewBlockB, IotaSI4735::getRdsNewBlockB);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getRdsPI, IotaSI4735::getRdsPI);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getRdsProgramType, IotaSI4735::getRdsProgramType);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getRdsReceived, IotaSI4735::getRdsReceived);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getRdsSync, IotaSI4735::getRdsSync);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getRdsSyncFound, IotaSI4735::getRdsSyncFound);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getRdsSyncLost, IotaSI4735::getRdsSyncLost);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getRdsTextSegmentAddress, IotaSI4735::getRdsTextSegmentAddress);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getRdsVersionCode, IotaSI4735::getRdsVersionCode);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getReceivedSignalStrengthIndicator, IotaSI4735::getReceivedSignalStrengthIndicator);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getSignalQualityInterrupt, IotaSI4735::getSignalQualityInterrupt);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getStatusCTS, IotaSI4735::getStatusCTS);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getStatusError, IotaSI4735::getStatusError);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getStatusMULT, IotaSI4735::getStatusMULT);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getStatusSNR, IotaSI4735::getStatusSNR);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getStatusValid, IotaSI4735::getStatusValid);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getTuneCompleteTriggered, IotaSI4735::getTuneCompleteTriggered);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getTuneFrequecyFast, IotaSI4735::getTuneFrequecyFast);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getTuneFrequecyFreeze, IotaSI4735::getTuneFrequecyFreeze);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::getVolume, IotaSI4735::getVolume);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::isAgcEnabled, IotaSI4735::isAgcEnabled);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::isCurrentTuneAM, IotaSI4735::isCurrentTuneAM);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::isCurrentTuneFM, IotaSI4735::isCurrentTuneFM);
  Noun::registerNilad((effects::families::SI4735 << 8) | effects::SI4735::isCurrentTuneSSB, IotaSI4735::isCurrentTuneSSB);

  // SI4735: Monads
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::digitalOutputSampleRate, IotaSI4735::digitalOutputSampleRate);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setAMDeEmphasis, IotaSI4735::setAMDeEmphasis);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setAMSoftMuteAttackRate, IotaSI4735::setAMSoftMuteAttackRate);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setAMSoftMuteRate, IotaSI4735::setAMSoftMuteRate);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setAMSoftMuteReleaseRate, IotaSI4735::setAMSoftMuteReleaseRate);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setAMSoftMuteSlop, IotaSI4735::setAMSoftMuteSlop);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setAMSoftMuteSnrThreshold, IotaSI4735::setAMSoftMuteSnrThreshold);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setAmAgcAttackRate, IotaSI4735::setAmAgcAttackRate);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setAmAgcReleaseRate, IotaSI4735::setAmAgcReleaseRate);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setAmDelayNB, IotaSI4735::setAmDelayNB);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setAmSoftMuteMaxAttenuation, IotaSI4735::setAmSoftMuteMaxAttenuation);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setAudioMode, IotaSI4735::setAudioMode);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setAudioMute, IotaSI4735::setAudioMute);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setDeviceI2CAddress, IotaSI4735::setDeviceI2CAddress);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setDeviceOtherI2CAddress, IotaSI4735::setDeviceOtherI2CAddress);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setFMDeEmphasis, IotaSI4735::setFMDeEmphasis);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setFifoCount, IotaSI4735::setFifoCount);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setFmBLendRssiMonoThreshold, IotaSI4735::setFmBLendRssiMonoThreshold);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setFmBLendSnrMonoThreshold, IotaSI4735::setFmBLendSnrMonoThreshold);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setFmBandwidth, IotaSI4735::setFmBandwidth);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setFmBlendMonoThreshold, IotaSI4735::setFmBlendMonoThreshold);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setFmBlendMultiPathMonoThreshold, IotaSI4735::setFmBlendMultiPathMonoThreshold);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setFmBlendMultiPathStereoThreshold, IotaSI4735::setFmBlendMultiPathStereoThreshold);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setFmBlendRssiStereoThreshold, IotaSI4735::setFmBlendRssiStereoThreshold);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setFmBlendSnrStereoThreshold, IotaSI4735::setFmBlendSnrStereoThreshold);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setFmBlendStereoThreshold, IotaSI4735::setFmBlendStereoThreshold);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setFmNoiseBlankDelay, IotaSI4735::setFmNoiseBlankDelay);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setFmNoiseBlankInterval, IotaSI4735::setFmNoiseBlankInterval);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setFmNoiseBlankRate, IotaSI4735::setFmNoiseBlankRate);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setFmNoiseBlankThreshold, IotaSI4735::setFmNoiseBlankThreshold);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setFmNoiseBlank_IIR_Filter, IotaSI4735::setFmNoiseBlank_IIR_Filter);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setFmSoftMuteMaxAttenuation, IotaSI4735::setFmSoftMuteMaxAttenuation);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setFrequencyNBFM, IotaSI4735::setFrequencyNBFM);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setFrequencyStep, IotaSI4735::setFrequencyStep);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setHardwareAudioMute, IotaSI4735::setHardwareAudioMute);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setMaxDelayPowerUp, IotaSI4735::setMaxDelayPowerUp);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setMaxDelaySetFrequency, IotaSI4735::setMaxDelaySetFrequency);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setRefClock, IotaSI4735::setRefClock);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setSBBSidebandCutoffFilter, IotaSI4735::setSBBSidebandCutoffFilter);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setSSBAudioBandwidth, IotaSI4735::setSSBAudioBandwidth);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setSSBAutomaticVolumeControl, IotaSI4735::setSSBAutomaticVolumeControl);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setSSBAvcDivider, IotaSI4735::setSSBAvcDivider);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setSSBBfo, IotaSI4735::setSSBBfo);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setSSBDspAfc, IotaSI4735::setSSBDspAfc);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setSSBSidebandCutoffFilter, IotaSI4735::setSSBSidebandCutoffFilter);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setSSBSoftMute, IotaSI4735::setSSBSoftMute);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setSeekAmRssiThreshold, IotaSI4735::setSeekAmRssiThreshold);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setSeekAmSNRThreshold, IotaSI4735::setSeekAmSNRThreshold);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setSeekAmSpacing, IotaSI4735::setSeekAmSpacing);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setSeekAmSrnThreshold, IotaSI4735::setSeekAmSrnThreshold);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setSeekFmRssiThreshold, IotaSI4735::setSeekFmRssiThreshold);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setSeekFmSNRThreshold, IotaSI4735::setSeekFmSNRThreshold);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setSeekFmSpacing, IotaSI4735::setSeekFmSpacing);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setSeekFmSrnThreshold, IotaSI4735::setSeekFmSrnThreshold);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setSsbAgcAttackRate, IotaSI4735::setSsbAgcAttackRate);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setSsbAgcReleaseRate, IotaSI4735::setSsbAgcReleaseRate);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setSsbIfAgcAttackRate, IotaSI4735::setSsbIfAgcAttackRate);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setSsbIfAgcReleaseRate, IotaSI4735::setSsbIfAgcReleaseRate);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setSsbSoftMuteMaxAttenuation, IotaSI4735::setSsbSoftMuteMaxAttenuation);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setTuneFrequencyAntennaCapacitor, IotaSI4735::setTuneFrequencyAntennaCapacitor);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setTuneFrequencyFast, IotaSI4735::setTuneFrequencyFast);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setTuneFrequencyFreze, IotaSI4735::setTuneFrequencyFreze);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setVolume, IotaSI4735::setVolume);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::getDeviceI2CAddress, IotaSI4735::getDeviceI2CAddress);
  Noun::registerMonad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::getProperty, IotaSI4735::getProperty);

  // SI4735: Dyads
  Noun::registerDyad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::seekStation, StorageType::WORD, NounType::INTEGER, IotaSI4735::seekStation);
  Noun::registerDyad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setAGC, StorageType::WORD, NounType::INTEGER, IotaSI4735::setAGC);
  Noun::registerDyad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setAMFrontEndAgcControl, StorageType::WORD, NounType::INTEGER, IotaSI4735::setAMFrontEndAgcControl);
  Noun::registerDyad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setAutomaticGainControl, StorageType::WORD, NounType::INTEGER, IotaSI4735::setAutomaticGainControl);
  Noun::registerDyad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setBandwidth, StorageType::WORD, NounType::INTEGER, IotaSI4735::setBandwidth);
  Noun::registerDyad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setProperty, StorageType::WORD, NounType::INTEGER, IotaSI4735::setProperty);
  Noun::registerDyad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setRefClockPrescaler, StorageType::WORD, NounType::INTEGER, IotaSI4735::setRefClockPrescaler);
  Noun::registerDyad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setSeekAmLimits, StorageType::WORD, NounType::INTEGER, IotaSI4735::setSeekAmLimits);
  Noun::registerDyad(StorageType::WORD, NounType::INTEGER, (effects::families::SI4735 << 8) | effects::SI4735::setSeekFmLimits, StorageType::WORD, NounType::INTEGER, IotaSI4735::setSeekFmLimits);

  // SI4735: Lists
  Noun::registerMonad(StorageType::WORD_ARRAY, NounType::LIST, (effects::families::SI4735 << 8) | effects::SI4735::digitalOutputFormat, IotaSI4735::digitalOutputFormat);
  Noun::registerMonad(StorageType::WORD_ARRAY, NounType::LIST, (effects::families::SI4735 << 8) | effects::SI4735::getCurrentReceivedSignalQuality, IotaSI4735::getCurrentReceivedSignalQuality);
  Noun::registerMonad(StorageType::WORD_ARRAY, NounType::LIST, (effects::families::SI4735 << 8) | effects::SI4735::getRdsStatus, IotaSI4735::getRdsStatus);
  Noun::registerMonad(StorageType::WORD_ARRAY, NounType::LIST, (effects::families::SI4735 << 8) | effects::SI4735::setAM, IotaSI4735::setAM);
  Noun::registerMonad(StorageType::WORD_ARRAY, NounType::LIST, (effects::families::SI4735 << 8) | effects::SI4735::setAmNoiseBlank, IotaSI4735::setAmNoiseBlank);
  Noun::registerMonad(StorageType::WORD_ARRAY, NounType::LIST, (effects::families::SI4735 << 8) | effects::SI4735::setAvcAmMaxGain, IotaSI4735::setAvcAmMaxGain);
  Noun::registerMonad(StorageType::WORD_ARRAY, NounType::LIST, (effects::families::SI4735 << 8) | effects::SI4735::setFM, IotaSI4735::setFM);
  Noun::registerMonad(StorageType::WORD_ARRAY, NounType::LIST, (effects::families::SI4735 << 8) | effects::SI4735::setFmNoiseBlank, IotaSI4735::setFmNoiseBlank);
  Noun::registerMonad(StorageType::WORD_ARRAY, NounType::LIST, (effects::families::SI4735 << 8) | effects::SI4735::setGpio, IotaSI4735::setGpio);
  Noun::registerMonad(StorageType::WORD_ARRAY, NounType::LIST, (effects::families::SI4735 << 8) | effects::SI4735::setGpioCtl, IotaSI4735::setGpioCtl);
  Noun::registerMonad(StorageType::WORD_ARRAY, NounType::LIST, (effects::families::SI4735 << 8) | effects::SI4735::setGpioIen, IotaSI4735::setGpioIen);
  Noun::registerMonad(StorageType::WORD_ARRAY, NounType::LIST, (effects::families::SI4735 << 8) | effects::SI4735::setNBFM, IotaSI4735::setNBFM);
  Noun::registerMonad(StorageType::WORD_ARRAY, NounType::LIST, (effects::families::SI4735 << 8) | effects::SI4735::setPowerUp, IotaSI4735::setPowerUp);
  Noun::registerMonad(StorageType::WORD_ARRAY, NounType::LIST, (effects::families::SI4735 << 8) | effects::SI4735::setRdsConfig, IotaSI4735::setRdsConfig);
  Noun::registerMonad(StorageType::WORD_ARRAY, NounType::LIST, (effects::families::SI4735 << 8) | effects::SI4735::setRdsIntSource, IotaSI4735::setRdsIntSource);
  Noun::registerMonad(StorageType::WORD_ARRAY, NounType::LIST, (effects::families::SI4735 << 8) | effects::SI4735::setSSB, IotaSI4735::setSSB);
  Noun::registerMonad(StorageType::WORD_ARRAY, NounType::LIST, (effects::families::SI4735 << 8) | effects::SI4735::setSSBConfig, IotaSI4735::setSSBConfig);
  Noun::registerMonad(StorageType::WORD_ARRAY, NounType::LIST, (effects::families::SI4735 << 8) | effects::SI4735::setSsbAgcOverrite, IotaSI4735::setSsbAgcOverrite);
  Noun::registerMonad(StorageType::WORD_ARRAY, NounType::LIST, (effects::families::SI4735 << 8) | effects::SI4735::setup, IotaSI4735::setup);
}

// Nilads
Storage IotaSI4735::RdsInit()
{
  instance->RdsInit();
  return WordArray::nil();
}

Storage IotaSI4735::analogPowerUp()
{
  instance->analogPowerUp();
  return WordArray::nil();
}

Storage IotaSI4735::clearRdsBuffer()
{
  instance->clearRdsBuffer();
  return WordArray::nil();
}

Storage IotaSI4735::frequencyDown()
{
  instance->frequencyDown();
  return WordArray::nil();
}

Storage IotaSI4735::frequencyUp()
{
  instance->frequencyUp();
  return WordArray::nil();
}

Storage IotaSI4735::getAutomaticGainControl()
{
  instance->getAutomaticGainControl();
  return WordArray::nil();
}

Storage IotaSI4735::getFirmware()
{
  instance->getFirmware();
  return WordArray::nil();
}

Storage IotaSI4735::getStatus()
{
  instance->getStatus();
  return WordArray::nil();
}

Storage IotaSI4735::patchPowerUp()
{
  instance->patchPowerUp();
  return WordArray::nil();
}

Storage IotaSI4735::patchPowerUpNBFM()
{
  instance->patchPowerUpNBFM();
  return WordArray::nil();
}

Storage IotaSI4735::powerDown()
{
  instance->powerDown();
  return WordArray::nil();
}

Storage IotaSI4735::radioPowerUp()
{
  instance->radioPowerUp();
  return WordArray::nil();
}

Storage IotaSI4735::rdsBeginQuery()
{
  instance->rdsBeginQuery();
  return WordArray::nil();
}

Storage IotaSI4735::rdsClearFifo()
{
  instance->rdsClearFifo();
  return WordArray::nil();
}

Storage IotaSI4735::rdsClearInterrupt()
{
  instance->rdsClearInterrupt();
  return WordArray::nil();
}

Storage IotaSI4735::reset()
{
  instance->reset();
  return WordArray::nil();
}

Storage IotaSI4735::resetEndIndicatorGroupA()
{
  instance->resetEndIndicatorGroupA();
  return WordArray::nil();
}

Storage IotaSI4735::resetEndIndicatorGroupB()
{
  instance->resetEndIndicatorGroupB();
  return WordArray::nil();
}

Storage IotaSI4735::seekNextStation()
{
  instance->seekNextStation();
  return WordArray::nil();
}

Storage IotaSI4735::seekPreviousStation()
{
  instance->seekPreviousStation();
  return WordArray::nil();
}

Storage IotaSI4735::seekStationDown()
{
  instance->seekStationDown();
  return WordArray::nil();
}

Storage IotaSI4735::seekStationUp()
{
  instance->seekStationUp();
  return WordArray::nil();
}

Storage IotaSI4735::setAvcAmDefaultGain()
{
  instance->setAvcAmDefaultGain();
  return WordArray::nil();
}

Storage IotaSI4735::setAvcAmMinGain()
{
  instance->setAvcAmMinGain();
  return WordArray::nil();
}

Storage IotaSI4735::setFmStereoOff()
{
  instance->setFmStereoOff();
  return WordArray::nil();
}

Storage IotaSI4735::setFmStereoOn()
{
  instance->setFmStereoOn();
  return WordArray::nil();
}

Storage IotaSI4735::setFrequencyDown()
{
  instance->setFrequencyDown();
  return WordArray::nil();
}

Storage IotaSI4735::setFrequencyUp()
{
  instance->setFrequencyUp();
  return WordArray::nil();
}

Storage IotaSI4735::setI2CFastMode()
{
  instance->setI2CFastMode();
  return WordArray::nil();
}

Storage IotaSI4735::setI2CLowSpeedMode()
{
  instance->setI2CLowSpeedMode();
  return WordArray::nil();
}

Storage IotaSI4735::setI2CStandardMode()
{
  instance->setI2CStandardMode();
  return WordArray::nil();
}

Storage IotaSI4735::setVolumeDown()
{
  instance->setVolumeDown();
  return WordArray::nil();
}

Storage IotaSI4735::setVolumeUp()
{
  instance->setVolumeUp();
  return WordArray::nil();
}

Storage IotaSI4735::ssbPowerUp()
{
  instance->ssbPowerUp();
  return WordArray::nil();
}

Storage IotaSI4735::volumeDown()
{
  instance->volumeDown();
  return WordArray::nil();
}

Storage IotaSI4735::volumeUp()
{
  instance->volumeUp();
  return WordArray::nil();
}

Storage IotaSI4735::waitToSend()
{
  instance->waitToSend();
  return WordArray::nil();
}

Storage IotaSI4735::getACFIndicator()
{
  const bool result = instance->getACFIndicator();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getAgcGainIndex()
{
  const uint8_t result = instance->getAgcGainIndex();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getAntennaTuningCapacitor()
{
  const uint16_t result = instance->getAntennaTuningCapacitor();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getBandLimit()
{
  const bool result = instance->getBandLimit();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getCurrentAfcRailIndicator()
{
  const bool result = instance->getCurrentAfcRailIndicator();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getCurrentAvcAmMaxGain()
{
  const uint8_t result = instance->getCurrentAvcAmMaxGain();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getCurrentBlendDetectInterrupt()
{
  const bool result = instance->getCurrentBlendDetectInterrupt();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getCurrentFrequency()
{
  const uint16_t result = instance->getCurrentFrequency();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getCurrentMultipath()
{
  const uint8_t result = instance->getCurrentMultipath();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getCurrentMultipathDetectHigh()
{
  const bool result = instance->getCurrentMultipathDetectHigh();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getCurrentMultipathDetectLow()
{
  const bool result = instance->getCurrentMultipathDetectLow();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getCurrentPilot()
{
  const bool result = instance->getCurrentPilot();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getCurrentRSSI()
{
  const uint8_t result = instance->getCurrentRSSI();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getCurrentRssiDetectHigh()
{
  const bool result = instance->getCurrentRssiDetectHigh();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getCurrentRssiDetectLow()
{
  const bool result = instance->getCurrentRssiDetectLow();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getCurrentSNR()
{
  const uint8_t result = instance->getCurrentSNR();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getCurrentSignedFrequencyOffset()
{
  const uint8_t result = instance->getCurrentSignedFrequencyOffset();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getCurrentSnrDetectHigh()
{
  const bool result = instance->getCurrentSnrDetectHigh();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getCurrentSnrDetectLow()
{
  const bool result = instance->getCurrentSnrDetectLow();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getCurrentSoftMuteIndicator()
{
  const bool result = instance->getCurrentSoftMuteIndicator();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getCurrentStereoBlend()
{
  const uint8_t result = instance->getCurrentStereoBlend();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getCurrentValidChannel()
{
  const bool result = instance->getCurrentValidChannel();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getCurrentVolume()
{
  const uint8_t result = instance->getCurrentVolume();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getEndIndicatorGroupA()
{
  const bool result = instance->getEndIndicatorGroupA();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getEndIndicatorGroupB()
{
  const bool result = instance->getEndIndicatorGroupB();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getFirmwareCHIPREV()
{
  const uint8_t result = instance->getFirmwareCHIPREV();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getFirmwareCMPMAJOR()
{
  const uint8_t result = instance->getFirmwareCMPMAJOR();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getFirmwareCMPMINOR()
{
  const uint8_t result = instance->getFirmwareCMPMINOR();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getFirmwareFWMAJOR()
{
  const uint8_t result = instance->getFirmwareFWMAJOR();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getFirmwareFWMINOR()
{
  const uint8_t result = instance->getFirmwareFWMINOR();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getFirmwarePATCHH()
{
  const uint8_t result = instance->getFirmwarePATCHH();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getFirmwarePATCHL()
{
  const uint8_t result = instance->getFirmwarePATCHL();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getFirmwarePN()
{
  const uint8_t result = instance->getFirmwarePN();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getFrequency()
{
  const uint16_t result = instance->getFrequency();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getGroupLost()
{
  const bool result = instance->getGroupLost();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getNumRdsFifoUsed()
{
  const uint8_t result = instance->getNumRdsFifoUsed();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getRadioDataSystemInterrupt()
{
  const bool result = instance->getRadioDataSystemInterrupt();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getRdsFlagAB()
{
  const uint8_t result = instance->getRdsFlagAB();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getRdsGroupType()
{
  const uint8_t result = instance->getRdsGroupType();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getRdsNewBlockA()
{
  const bool result = instance->getRdsNewBlockA();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getRdsNewBlockB()
{
  const bool result = instance->getRdsNewBlockB();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getRdsPI()
{
  const uint16_t result = instance->getRdsPI();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getRdsProgramType()
{
  const uint8_t result = instance->getRdsProgramType();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getRdsReceived()
{
  const bool result = instance->getRdsReceived();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getRdsSync()
{
  const bool result = instance->getRdsSync();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getRdsSyncFound()
{
  const bool result = instance->getRdsSyncFound();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getRdsSyncLost()
{
  const bool result = instance->getRdsSyncLost();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getRdsTextSegmentAddress()
{
  const uint8_t result = instance->getRdsTextSegmentAddress();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getRdsVersionCode()
{
  const uint8_t result = instance->getRdsVersionCode();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getReceivedSignalStrengthIndicator()
{
  const uint8_t result = instance->getReceivedSignalStrengthIndicator();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getSignalQualityInterrupt()
{
  const bool result = instance->getSignalQualityInterrupt();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getStatusCTS()
{
  const bool result = instance->getStatusCTS();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getStatusError()
{
  const bool result = instance->getStatusError();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getStatusMULT()
{
  const uint8_t result = instance->getStatusMULT();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getStatusSNR()
{
  const uint8_t result = instance->getStatusSNR();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getStatusValid()
{
  const bool result = instance->getStatusValid();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getTuneCompleteTriggered()
{
  const bool result = instance->getTuneCompleteTriggered();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getTuneFrequecyFast()
{
  const uint8_t result = instance->getTuneFrequecyFast();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getTuneFrequecyFreeze()
{
  const uint8_t result = instance->getTuneFrequecyFreeze();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::getVolume()
{
  const uint8_t result = instance->getVolume();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::isAgcEnabled()
{
  const bool result = instance->isAgcEnabled();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::isCurrentTuneAM()
{
  const bool result = instance->isCurrentTuneAM();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::isCurrentTuneFM()
{
  const bool result = instance->isCurrentTuneFM();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}

Storage IotaSI4735::isCurrentTuneSSB()
{
  const bool result = instance->isCurrentTuneSSB();
  const int converted = static_cast<int>(result);
  return Word::make(converted, NounType::INTEGER);
}


// Monads
Storage IotaSI4735::digitalOutputSampleRate(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    instance->digitalOutputSampleRate(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setAMDeEmphasis(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setAMDeEmphasis(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setAMSoftMuteAttackRate(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    instance->setAMSoftMuteAttackRate(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setAMSoftMuteRate(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setAMSoftMuteRate(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setAMSoftMuteReleaseRate(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setAMSoftMuteReleaseRate(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setAMSoftMuteSlop(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setAMSoftMuteSlop(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setAMSoftMuteSnrThreshold(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setAMSoftMuteSnrThreshold(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setAmAgcAttackRate(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    instance->setAmAgcAttackRate(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setAmAgcReleaseRate(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    instance->setAmAgcReleaseRate(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setAmDelayNB(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    instance->setAmDelayNB(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setAmSoftMuteMaxAttenuation(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setAmSoftMuteMaxAttenuation(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setAudioMode(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setAudioMode(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setAudioMute(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const bool converted = static_cast<bool>(value);
    instance->setAudioMute(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setDeviceI2CAddress(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setDeviceI2CAddress(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setDeviceOtherI2CAddress(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setDeviceOtherI2CAddress(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setFMDeEmphasis(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setFMDeEmphasis(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setFifoCount(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    instance->setFifoCount(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setFmBLendRssiMonoThreshold(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setFmBLendRssiMonoThreshold(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setFmBLendSnrMonoThreshold(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setFmBLendSnrMonoThreshold(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setFmBandwidth(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setFmBandwidth(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setFmBlendMonoThreshold(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setFmBlendMonoThreshold(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setFmBlendMultiPathMonoThreshold(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setFmBlendMultiPathMonoThreshold(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setFmBlendMultiPathStereoThreshold(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setFmBlendMultiPathStereoThreshold(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setFmBlendRssiStereoThreshold(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setFmBlendRssiStereoThreshold(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setFmBlendSnrStereoThreshold(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setFmBlendSnrStereoThreshold(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setFmBlendStereoThreshold(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setFmBlendStereoThreshold(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setFmNoiseBlankDelay(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    instance->setFmNoiseBlankDelay(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setFmNoiseBlankInterval(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    instance->setFmNoiseBlankInterval(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setFmNoiseBlankRate(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    instance->setFmNoiseBlankRate(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setFmNoiseBlankThreshold(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    instance->setFmNoiseBlankThreshold(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setFmNoiseBlank_IIR_Filter(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    instance->setFmNoiseBlank_IIR_Filter(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setFmSoftMuteMaxAttenuation(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setFmSoftMuteMaxAttenuation(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setFrequencyNBFM(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    instance->setFrequencyNBFM(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setFrequencyStep(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    instance->setFrequencyStep(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setHardwareAudioMute(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const bool converted = static_cast<bool>(value);
    instance->setHardwareAudioMute(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setMaxDelayPowerUp(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    instance->setMaxDelayPowerUp(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setMaxDelaySetFrequency(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    instance->setMaxDelaySetFrequency(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setRefClock(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    instance->setRefClock(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setSBBSidebandCutoffFilter(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setSBBSidebandCutoffFilter(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setSSBAudioBandwidth(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setSSBAudioBandwidth(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setSSBAutomaticVolumeControl(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setSSBAutomaticVolumeControl(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setSSBAvcDivider(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setSSBAvcDivider(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setSSBBfo(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const int converted = static_cast<int>(value);
    instance->setSSBBfo(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setSSBDspAfc(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setSSBDspAfc(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setSSBSidebandCutoffFilter(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setSSBSidebandCutoffFilter(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setSSBSoftMute(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setSSBSoftMute(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setSeekAmRssiThreshold(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    instance->setSeekAmRssiThreshold(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setSeekAmSNRThreshold(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    instance->setSeekAmSNRThreshold(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setSeekAmSpacing(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    instance->setSeekAmSpacing(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setSeekAmSrnThreshold(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    instance->setSeekAmSrnThreshold(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setSeekFmRssiThreshold(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    instance->setSeekFmRssiThreshold(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setSeekFmSNRThreshold(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    instance->setSeekFmSNRThreshold(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setSeekFmSpacing(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    instance->setSeekFmSpacing(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setSeekFmSrnThreshold(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    instance->setSeekFmSrnThreshold(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setSsbAgcAttackRate(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    instance->setSsbAgcAttackRate(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setSsbAgcReleaseRate(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    instance->setSsbAgcReleaseRate(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setSsbIfAgcAttackRate(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setSsbIfAgcAttackRate(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setSsbIfAgcReleaseRate(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setSsbIfAgcReleaseRate(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setSsbSoftMuteMaxAttenuation(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setSsbSoftMuteMaxAttenuation(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setTuneFrequencyAntennaCapacitor(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    instance->setTuneFrequencyAntennaCapacitor(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setTuneFrequencyFast(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setTuneFrequencyFast(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setTuneFrequencyFreze(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setTuneFrequencyFreze(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setVolume(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    instance->setVolume(converted);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::getDeviceI2CAddress(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint8_t converted = static_cast<uint8_t>(value);
    const int16_t result = instance->getDeviceI2CAddress(converted);
    const int result_int = static_cast<int>(result);
    return Word::make(result_int, NounType::INTEGER);
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::getProperty(const Storage& i)
{
  if(std::holds_alternative<int>(i.i))
  {
    const int value = std::get<int>(i.i);
    const uint16_t converted = static_cast<uint16_t>(value);
    const int32_t result = instance->getProperty(converted);
    const int result_int = static_cast<int>(result);
    return Word::make(result_int, NounType::INTEGER);
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}


// Dyads
Storage IotaSI4735::seekStation(const Storage& i, const Storage& x)
{
  if(std::holds_alternative<int>(i.i) && std::holds_alternative<int>(x.i))
  {
    const int value1 = std::get<int>(i.i);
    const int value2 = std::get<int>(x.i);
    const uint8_t converted1 = static_cast<uint8_t>(value1);
    const uint8_t converted2 = static_cast<uint8_t>(value2);
    instance->seekStation(converted1, converted2);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setAGC(const Storage& i, const Storage& x)
{
  if(std::holds_alternative<int>(i.i) && std::holds_alternative<int>(x.i))
  {
    const int value1 = std::get<int>(i.i);
    const int value2 = std::get<int>(x.i);
    const uint8_t converted1 = static_cast<uint8_t>(value1);
    const uint8_t converted2 = static_cast<uint8_t>(value2);
    instance->setAGC(converted1, converted2);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setAMFrontEndAgcControl(const Storage& i, const Storage& x)
{
  if(std::holds_alternative<int>(i.i) && std::holds_alternative<int>(x.i))
  {
    const int value1 = std::get<int>(i.i);
    const int value2 = std::get<int>(x.i);
    const uint8_t converted1 = static_cast<uint8_t>(value1);
    const uint8_t converted2 = static_cast<uint8_t>(value2);
    instance->setAMFrontEndAgcControl(converted1, converted2);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setAutomaticGainControl(const Storage& i, const Storage& x)
{
  if(std::holds_alternative<int>(i.i) && std::holds_alternative<int>(x.i))
  {
    const int value1 = std::get<int>(i.i);
    const int value2 = std::get<int>(x.i);
    const uint8_t converted1 = static_cast<uint8_t>(value1);
    const uint8_t converted2 = static_cast<uint8_t>(value2);
    instance->setAutomaticGainControl(converted1, converted2);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setBandwidth(const Storage& i, const Storage& x)
{
  if(std::holds_alternative<int>(i.i) && std::holds_alternative<int>(x.i))
  {
    const int value1 = std::get<int>(i.i);
    const int value2 = std::get<int>(x.i);
    const uint8_t converted1 = static_cast<uint8_t>(value1);
    const uint8_t converted2 = static_cast<uint8_t>(value2);
    instance->setBandwidth(converted1, converted2);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setProperty(const Storage& i, const Storage& x)
{
  if(std::holds_alternative<int>(i.i) && std::holds_alternative<int>(x.i))
  {
    const int value1 = std::get<int>(i.i);
    const int value2 = std::get<int>(x.i);
    const uint16_t converted1 = static_cast<uint16_t>(value1);
    const uint16_t converted2 = static_cast<uint16_t>(value2);
    instance->setProperty(converted1, converted2);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setRefClockPrescaler(const Storage& i, const Storage& x)
{
  if(std::holds_alternative<int>(i.i) && std::holds_alternative<int>(x.i))
  {
    const int value1 = std::get<int>(i.i);
    const int value2 = std::get<int>(x.i);
    const uint16_t converted1 = static_cast<uint16_t>(value1);
    const uint8_t converted2 = static_cast<uint8_t>(value2);
    instance->setRefClockPrescaler(converted1, converted2);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setSeekAmLimits(const Storage& i, const Storage& x)
{
  if(std::holds_alternative<int>(i.i) && std::holds_alternative<int>(x.i))
  {
    const int value1 = std::get<int>(i.i);
    const int value2 = std::get<int>(x.i);
    const uint16_t converted1 = static_cast<uint16_t>(value1);
    const uint16_t converted2 = static_cast<uint16_t>(value2);
    instance->setSeekAmLimits(converted1, converted2);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setSeekFmLimits(const Storage& i, const Storage& x)
{
  if(std::holds_alternative<int>(i.i) && std::holds_alternative<int>(x.i))
  {
    const int value1 = std::get<int>(i.i);
    const int value2 = std::get<int>(x.i);
    const uint16_t converted1 = static_cast<uint16_t>(value1);
    const uint16_t converted2 = static_cast<uint16_t>(value2);
    instance->setSeekFmLimits(converted1, converted2);
    return WordArray::nil();
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}


// Lists
Storage IotaSI4735::digitalOutputFormat(const Storage& i)
{
  if(std::holds_alternative<ints>(i.i))
  {
    const ints& values = std::get<ints>(i.i);
    if(values.size() == 4)
    {
      const uint8_t arg0 = static_cast<uint8_t>(values[0]);
      const uint8_t arg1 = static_cast<uint8_t>(values[1]);
      const uint8_t arg2 = static_cast<uint8_t>(values[2]);
      const uint8_t arg3 = static_cast<uint8_t>(values[3]);
      instance->digitalOutputFormat(arg0, arg1, arg2, arg3);
      return WordArray::nil();
    }
    else
    {
      return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
    }
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::getCurrentReceivedSignalQuality(const Storage& i)
{
  if(std::holds_alternative<ints>(i.i))
  {
    const ints& values = std::get<ints>(i.i);

    if(values.size() == 0)
    {
      (instance->*static_cast<void(SI4735::*)()>(&SI4735::getCurrentReceivedSignalQuality))();
      return WordArray::nil();
    }
    else if(values.size() == 1)
    {
      const uint8_t arg0 = static_cast<uint8_t>(values[0]);
      instance->getCurrentReceivedSignalQuality(arg0);
      return WordArray::nil();
    }
    else
    {
      return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
    }
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::getRdsStatus(const Storage& i)
{
  if(std::holds_alternative<ints>(i.i))
  {
    const ints& values = std::get<ints>(i.i);

    if(values.size() == 0)
    {
      (instance->*static_cast<void(SI4735::*)()>(&SI4735::getRdsStatus))();
      return WordArray::nil();
    }
    else if(values.size() == 3)
    {
      const uint8_t arg0 = static_cast<uint8_t>(values[0]);
      const uint8_t arg1 = static_cast<uint8_t>(values[1]);
      const uint8_t arg2 = static_cast<uint8_t>(values[2]);
      instance->getRdsStatus(arg0, arg1, arg2);
      return WordArray::nil();
    }
    else
    {
      return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
    }
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setAM(const Storage& i)
{
  if(std::holds_alternative<ints>(i.i))
  {
    const ints& values = std::get<ints>(i.i);

    if(values.size() == 0)
    {
      (instance->*static_cast<void(SI4735::*)()>(&SI4735::setAM))();
      return WordArray::nil();
    }
    else if(values.size() == 4)
    {
      const uint16_t arg0 = static_cast<uint16_t>(values[0]);
      const uint16_t arg1 = static_cast<uint16_t>(values[1]);
      const uint16_t arg2 = static_cast<uint16_t>(values[2]);
      const uint16_t arg3 = static_cast<uint16_t>(values[3]);
      instance->setAM(arg0, arg1, arg2, arg3);
      return WordArray::nil();
    }
    else
    {
      return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
    }
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setAmNoiseBlank(const Storage& i)
{
  if(std::holds_alternative<ints>(i.i))
  {
    const ints& values = std::get<ints>(i.i);
    if(values.size() == 3)
    {
      const uint16_t arg0 = static_cast<uint16_t>(values[0]);
      const uint16_t arg1 = static_cast<uint16_t>(values[1]);
      const uint16_t arg2 = static_cast<uint16_t>(values[2]);
      instance->setAmNoiseBlank(arg0, arg1, arg2);
      return WordArray::nil();
    }
    else
    {
      return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
    }
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setAvcAmMaxGain(const Storage& i)
{
  if(std::holds_alternative<ints>(i.i))
  {
    const ints& values = std::get<ints>(i.i);

    if(values.size() == 0)
    {
      (instance->*static_cast<void(SI4735::*)()>(&SI4735::setAvcAmMaxGain))();
      return WordArray::nil();
    }
    else if(values.size() == 1)
    {
      const uint8_t arg0 = static_cast<uint8_t>(values[0]);
      instance->setAvcAmMaxGain(arg0);
      return WordArray::nil();
    }
    else
    {
      return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
    }
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setFM(const Storage& i)
{
  if(std::holds_alternative<ints>(i.i))
  {
    const ints& values = std::get<ints>(i.i);

    if(values.size() == 0)
    {
      (instance->*static_cast<void(SI4735::*)()>(&SI4735::setFM))();
      return WordArray::nil();
    }
    else if(values.size() == 4)
    {
      const uint16_t arg0 = static_cast<uint16_t>(values[0]);
      const uint16_t arg1 = static_cast<uint16_t>(values[1]);
      const uint16_t arg2 = static_cast<uint16_t>(values[2]);
      const uint16_t arg3 = static_cast<uint16_t>(values[3]);
      instance->setFM(arg0, arg1, arg2, arg3);
      return WordArray::nil();
    }
    else
    {
      return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
    }
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setFmNoiseBlank(const Storage& i)
{
  if(std::holds_alternative<ints>(i.i))
  {
    const ints& values = std::get<ints>(i.i);
    if(values.size() == 3)
    {
      const uint16_t arg0 = static_cast<uint16_t>(values[0]);
      const uint16_t arg1 = static_cast<uint16_t>(values[1]);
      const uint16_t arg2 = static_cast<uint16_t>(values[2]);
      instance->setFmNoiseBlank(arg0, arg1, arg2);
      return WordArray::nil();
    }
    else
    {
      return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
    }
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setGpio(const Storage& i)
{
  if(std::holds_alternative<ints>(i.i))
  {
    const ints& values = std::get<ints>(i.i);
    if(values.size() == 3)
    {
      const uint8_t arg0 = static_cast<uint8_t>(values[0]);
      const uint8_t arg1 = static_cast<uint8_t>(values[1]);
      const uint8_t arg2 = static_cast<uint8_t>(values[2]);
      instance->setGpio(arg0, arg1, arg2);
      return WordArray::nil();
    }
    else
    {
      return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
    }
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setGpioCtl(const Storage& i)
{
  if(std::holds_alternative<ints>(i.i))
  {
    const ints& values = std::get<ints>(i.i);
    if(values.size() == 3)
    {
      const uint8_t arg0 = static_cast<uint8_t>(values[0]);
      const uint8_t arg1 = static_cast<uint8_t>(values[1]);
      const uint8_t arg2 = static_cast<uint8_t>(values[2]);
      instance->setGpioCtl(arg0, arg1, arg2);
      return WordArray::nil();
    }
    else
    {
      return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
    }
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setGpioIen(const Storage& i)
{
  if(std::holds_alternative<ints>(i.i))
  {
    const ints& values = std::get<ints>(i.i);
    if(values.size() == 6)
    {
      const uint8_t arg0 = static_cast<uint8_t>(values[0]);
      const uint8_t arg1 = static_cast<uint8_t>(values[1]);
      const uint8_t arg2 = static_cast<uint8_t>(values[2]);
      const uint8_t arg3 = static_cast<uint8_t>(values[3]);
      const uint8_t arg4 = static_cast<uint8_t>(values[4]);
      const uint8_t arg5 = static_cast<uint8_t>(values[5]);
      instance->setGpioIen(arg0, arg1, arg2, arg3, arg4, arg5);
      return WordArray::nil();
    }
    else
    {
      return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
    }
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setNBFM(const Storage& i)
{
  if(std::holds_alternative<ints>(i.i))
  {
    const ints& values = std::get<ints>(i.i);

    if(values.size() == 0)
    {
      (instance->*static_cast<void(SI4735::*)()>(&SI4735::setNBFM))();
      return WordArray::nil();
    }
    else if(values.size() == 4)
    {
      const uint16_t arg0 = static_cast<uint16_t>(values[0]);
      const uint16_t arg1 = static_cast<uint16_t>(values[1]);
      const uint16_t arg2 = static_cast<uint16_t>(values[2]);
      const uint16_t arg3 = static_cast<uint16_t>(values[3]);
      instance->setNBFM(arg0, arg1, arg2, arg3);
      return WordArray::nil();
    }
    else
    {
      return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
    }
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setPowerUp(const Storage& i)
{
  if(std::holds_alternative<ints>(i.i))
  {
    const ints& values = std::get<ints>(i.i);
    if(values.size() == 6)
    {
      const uint8_t arg0 = static_cast<uint8_t>(values[0]);
      const uint8_t arg1 = static_cast<uint8_t>(values[1]);
      const uint8_t arg2 = static_cast<uint8_t>(values[2]);
      const uint8_t arg3 = static_cast<uint8_t>(values[3]);
      const uint8_t arg4 = static_cast<uint8_t>(values[4]);
      const uint8_t arg5 = static_cast<uint8_t>(values[5]);
      instance->setPowerUp(arg0, arg1, arg2, arg3, arg4, arg5);
      return WordArray::nil();
    }
    else
    {
      return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
    }
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setRdsConfig(const Storage& i)
{
  if(std::holds_alternative<ints>(i.i))
  {
    const ints& values = std::get<ints>(i.i);
    if(values.size() == 5)
    {
      const uint8_t arg0 = static_cast<uint8_t>(values[0]);
      const uint8_t arg1 = static_cast<uint8_t>(values[1]);
      const uint8_t arg2 = static_cast<uint8_t>(values[2]);
      const uint8_t arg3 = static_cast<uint8_t>(values[3]);
      const uint8_t arg4 = static_cast<uint8_t>(values[4]);
      instance->setRdsConfig(arg0, arg1, arg2, arg3, arg4);
      return WordArray::nil();
    }
    else
    {
      return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
    }
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setRdsIntSource(const Storage& i)
{
  if(std::holds_alternative<ints>(i.i))
  {
    const ints& values = std::get<ints>(i.i);
    if(values.size() == 5)
    {
      const uint8_t arg0 = static_cast<uint8_t>(values[0]);
      const uint8_t arg1 = static_cast<uint8_t>(values[1]);
      const uint8_t arg2 = static_cast<uint8_t>(values[2]);
      const uint8_t arg3 = static_cast<uint8_t>(values[3]);
      const uint8_t arg4 = static_cast<uint8_t>(values[4]);
      instance->setRdsIntSource(arg0, arg1, arg2, arg3, arg4);
      return WordArray::nil();
    }
    else
    {
      return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
    }
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setSSB(const Storage& i)
{
  if(std::holds_alternative<ints>(i.i))
  {
    const ints& values = std::get<ints>(i.i);

    if(values.size() == 1)
    {
      const uint8_t arg0 = static_cast<uint8_t>(values[0]);
      instance->setSSB(arg0);
      return WordArray::nil();
    }
    else if(values.size() == 5)
    {
      const uint16_t arg0 = static_cast<uint16_t>(values[0]);
      const uint16_t arg1 = static_cast<uint16_t>(values[1]);
      const uint16_t arg2 = static_cast<uint16_t>(values[2]);
      const uint16_t arg3 = static_cast<uint16_t>(values[3]);
      const uint8_t arg4 = static_cast<uint8_t>(values[4]);
      instance->setSSB(arg0, arg1, arg2, arg3, arg4);
      return WordArray::nil();
    }
    else
    {
      return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
    }
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setSSBConfig(const Storage& i)
{
  if(std::holds_alternative<ints>(i.i))
  {
    const ints& values = std::get<ints>(i.i);
    if(values.size() == 6)
    {
      const uint8_t arg0 = static_cast<uint8_t>(values[0]);
      const uint8_t arg1 = static_cast<uint8_t>(values[1]);
      const uint8_t arg2 = static_cast<uint8_t>(values[2]);
      const uint8_t arg3 = static_cast<uint8_t>(values[3]);
      const uint8_t arg4 = static_cast<uint8_t>(values[4]);
      const uint8_t arg5 = static_cast<uint8_t>(values[5]);
      instance->setSSBConfig(arg0, arg1, arg2, arg3, arg4, arg5);
      return WordArray::nil();
    }
    else
    {
      return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
    }
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setSsbAgcOverrite(const Storage& i)
{
  if(std::holds_alternative<ints>(i.i))
  {
    const ints& values = std::get<ints>(i.i);
    if(values.size() == 3)
    {
      const uint8_t arg0 = static_cast<uint8_t>(values[0]);
      const uint8_t arg1 = static_cast<uint8_t>(values[1]);
      const uint8_t arg2 = static_cast<uint8_t>(values[2]);
      instance->setSsbAgcOverrite(arg0, arg1, arg2);
      return WordArray::nil();
    }
    else
    {
      return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
    }
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

Storage IotaSI4735::setup(const Storage& i)
{
  if(std::holds_alternative<ints>(i.i))
  {
    const ints& values = std::get<ints>(i.i);

    if(values.size() == 2)
    {
      const uint8_t arg0 = static_cast<uint8_t>(values[0]);
      const uint8_t arg1 = static_cast<uint8_t>(values[1]);
      instance->setup(arg0, arg1);
      return WordArray::nil();
    }
    else if(values.size() == 6)
    {
      const uint8_t arg0 = static_cast<uint8_t>(values[0]);
      const uint8_t arg1 = static_cast<uint8_t>(values[1]);
      const uint8_t arg2 = static_cast<uint8_t>(values[2]);
      const uint8_t arg3 = static_cast<uint8_t>(values[3]);
      const uint8_t arg4 = static_cast<uint8_t>(values[4]);
      const uint8_t arg5 = static_cast<uint8_t>(values[5]);
      instance->setup(arg0, arg1, arg2, arg3, arg4, arg5);
      return WordArray::nil();
    }
    else
    {
      return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
    }
  }
  else
  {
    return Word::make(UNSUPPORTED_OBJECT, NounType::ERROR);
  }
}

SI4735* IotaSI4735::instance;

//
// Generated by iota-wrapper on 10/02/25
//

#ifndef IOTA_SI4735_H
#define IOTA_SI4735_H

#include <SI4735.h>
#include <ion-cpp.h>
#include <storage/storage.h>
#include <iota-cpp.h>
#include <effects/effects.h>
#include <effects/effects_provider.h>

namespace effects::families
{
  static constexpr int SI4735 = 5261013;
}

namespace effects::SI4735
{
  // Nilads
  static constexpr int RdsInit = 1;
  static constexpr int analogPowerUp = 2;
  static constexpr int clearRdsBuffer = 3;
  static constexpr int frequencyDown = 4;
  static constexpr int frequencyUp = 5;
  static constexpr int getAutomaticGainControl = 6;
  static constexpr int getFirmware = 7;
  static constexpr int getStatus = 8;
  static constexpr int patchPowerUp = 9;
  static constexpr int patchPowerUpNBFM = 10;
  static constexpr int powerDown = 11;
  static constexpr int radioPowerUp = 12;
  static constexpr int rdsBeginQuery = 13;
  static constexpr int rdsClearFifo = 14;
  static constexpr int rdsClearInterrupt = 15;
  static constexpr int reset = 16;
  static constexpr int resetEndIndicatorGroupA = 17;
  static constexpr int resetEndIndicatorGroupB = 18;
  static constexpr int seekNextStation = 19;
  static constexpr int seekPreviousStation = 20;
  static constexpr int seekStationDown = 21;
  static constexpr int seekStationUp = 22;
  static constexpr int setAvcAmDefaultGain = 23;
  static constexpr int setAvcAmMinGain = 24;
  static constexpr int setFmStereoOff = 25;
  static constexpr int setFmStereoOn = 26;
  static constexpr int setFrequencyDown = 27;
  static constexpr int setFrequencyUp = 28;
  static constexpr int setI2CFastMode = 29;
  static constexpr int setI2CLowSpeedMode = 30;
  static constexpr int setI2CStandardMode = 31;
  static constexpr int setVolumeDown = 32;
  static constexpr int setVolumeUp = 33;
  static constexpr int ssbPowerUp = 34;
  static constexpr int volumeDown = 35;
  static constexpr int volumeUp = 36;
  static constexpr int waitToSend = 37;
  static constexpr int getACFIndicator = 38;
  static constexpr int getAgcGainIndex = 39;
  static constexpr int getAntennaTuningCapacitor = 40;
  static constexpr int getBandLimit = 41;
  static constexpr int getCurrentAfcRailIndicator = 42;
  static constexpr int getCurrentAvcAmMaxGain = 43;
  static constexpr int getCurrentBlendDetectInterrupt = 44;
  static constexpr int getCurrentFrequency = 45;
  static constexpr int getCurrentMultipath = 46;
  static constexpr int getCurrentMultipathDetectHigh = 47;
  static constexpr int getCurrentMultipathDetectLow = 48;
  static constexpr int getCurrentPilot = 49;
  static constexpr int getCurrentRSSI = 50;
  static constexpr int getCurrentRssiDetectHigh = 51;
  static constexpr int getCurrentRssiDetectLow = 52;
  static constexpr int getCurrentSNR = 53;
  static constexpr int getCurrentSignedFrequencyOffset = 54;
  static constexpr int getCurrentSnrDetectHigh = 55;
  static constexpr int getCurrentSnrDetectLow = 56;
  static constexpr int getCurrentSoftMuteIndicator = 57;
  static constexpr int getCurrentStereoBlend = 58;
  static constexpr int getCurrentValidChannel = 59;
  static constexpr int getCurrentVolume = 60;
  static constexpr int getEndIndicatorGroupA = 61;
  static constexpr int getEndIndicatorGroupB = 62;
  static constexpr int getFirmwareCHIPREV = 63;
  static constexpr int getFirmwareCMPMAJOR = 64;
  static constexpr int getFirmwareCMPMINOR = 65;
  static constexpr int getFirmwareFWMAJOR = 66;
  static constexpr int getFirmwareFWMINOR = 67;
  static constexpr int getFirmwarePATCHH = 68;
  static constexpr int getFirmwarePATCHL = 69;
  static constexpr int getFirmwarePN = 70;
  static constexpr int getFrequency = 71;
  static constexpr int getGroupLost = 72;
  static constexpr int getNumRdsFifoUsed = 73;
  static constexpr int getRadioDataSystemInterrupt = 74;
  static constexpr int getRdsFlagAB = 75;
  static constexpr int getRdsGroupType = 76;
  static constexpr int getRdsNewBlockA = 77;
  static constexpr int getRdsNewBlockB = 78;
  static constexpr int getRdsPI = 79;
  static constexpr int getRdsProgramType = 80;
  static constexpr int getRdsReceived = 81;
  static constexpr int getRdsSync = 82;
  static constexpr int getRdsSyncFound = 83;
  static constexpr int getRdsSyncLost = 84;
  static constexpr int getRdsTextSegmentAddress = 85;
  static constexpr int getRdsVersionCode = 86;
  static constexpr int getReceivedSignalStrengthIndicator = 87;
  static constexpr int getSignalQualityInterrupt = 88;
  static constexpr int getStatusCTS = 89;
  static constexpr int getStatusError = 90;
  static constexpr int getStatusMULT = 91;
  static constexpr int getStatusSNR = 92;
  static constexpr int getStatusValid = 93;
  static constexpr int getTuneCompleteTriggered = 94;
  static constexpr int getTuneFrequecyFast = 95;
  static constexpr int getTuneFrequecyFreeze = 96;
  static constexpr int getVolume = 97;
  static constexpr int isAgcEnabled = 98;
  static constexpr int isCurrentTuneAM = 99;
  static constexpr int isCurrentTuneFM = 100;
  static constexpr int isCurrentTuneSSB = 101;

  // Monads
  static constexpr int digitalOutputSampleRate = 102;
  static constexpr int setAMDeEmphasis = 103;
  static constexpr int setAMSoftMuteAttackRate = 104;
  static constexpr int setAMSoftMuteRate = 105;
  static constexpr int setAMSoftMuteReleaseRate = 106;
  static constexpr int setAMSoftMuteSlop = 107;
  static constexpr int setAMSoftMuteSnrThreshold = 108;
  static constexpr int setAmAgcAttackRate = 109;
  static constexpr int setAmAgcReleaseRate = 110;
  static constexpr int setAmDelayNB = 111;
  static constexpr int setAmSoftMuteMaxAttenuation = 112;
  static constexpr int setAudioMode = 113;
  static constexpr int setAudioMute = 114;
  static constexpr int setDeviceI2CAddress = 115;
  static constexpr int setDeviceOtherI2CAddress = 116;
  static constexpr int setFMDeEmphasis = 117;
  static constexpr int setFifoCount = 118;
  static constexpr int setFmBLendRssiMonoThreshold = 119;
  static constexpr int setFmBLendSnrMonoThreshold = 120;
  static constexpr int setFmBandwidth = 121;
  static constexpr int setFmBlendMonoThreshold = 122;
  static constexpr int setFmBlendMultiPathMonoThreshold = 123;
  static constexpr int setFmBlendMultiPathStereoThreshold = 124;
  static constexpr int setFmBlendRssiStereoThreshold = 125;
  static constexpr int setFmBlendSnrStereoThreshold = 126;
  static constexpr int setFmBlendStereoThreshold = 127;
  static constexpr int setFmNoiseBlankDelay = 128;
  static constexpr int setFmNoiseBlankInterval = 129;
  static constexpr int setFmNoiseBlankRate = 130;
  static constexpr int setFmNoiseBlankThreshold = 131;
  static constexpr int setFmNoiseBlank_IIR_Filter = 132;
  static constexpr int setFmSoftMuteMaxAttenuation = 133;
  static constexpr int setFrequencyNBFM = 134;
  static constexpr int setFrequencyStep = 135;
  static constexpr int setHardwareAudioMute = 136;
  static constexpr int setMaxDelayPowerUp = 137;
  static constexpr int setMaxDelaySetFrequency = 138;
  static constexpr int setRefClock = 139;
  static constexpr int setSBBSidebandCutoffFilter = 140;
  static constexpr int setSSBAudioBandwidth = 141;
  static constexpr int setSSBAutomaticVolumeControl = 142;
  static constexpr int setSSBAvcDivider = 143;
  static constexpr int setSSBBfo = 144;
  static constexpr int setSSBDspAfc = 145;
  static constexpr int setSSBSidebandCutoffFilter = 146;
  static constexpr int setSSBSoftMute = 147;
  static constexpr int setSeekAmRssiThreshold = 148;
  static constexpr int setSeekAmSNRThreshold = 149;
  static constexpr int setSeekAmSpacing = 150;
  static constexpr int setSeekAmSrnThreshold = 151;
  static constexpr int setSeekFmRssiThreshold = 152;
  static constexpr int setSeekFmSNRThreshold = 153;
  static constexpr int setSeekFmSpacing = 154;
  static constexpr int setSeekFmSrnThreshold = 155;
  static constexpr int setSsbAgcAttackRate = 156;
  static constexpr int setSsbAgcReleaseRate = 157;
  static constexpr int setSsbIfAgcAttackRate = 158;
  static constexpr int setSsbIfAgcReleaseRate = 159;
  static constexpr int setSsbSoftMuteMaxAttenuation = 160;
  static constexpr int setTuneFrequencyAntennaCapacitor = 161;
  static constexpr int setTuneFrequencyFast = 162;
  static constexpr int setTuneFrequencyFreze = 163;
  static constexpr int setVolume = 164;
  static constexpr int getDeviceI2CAddress = 165;
  static constexpr int getProperty = 166;

  // Dyads
  static constexpr int seekStation = 167;
  static constexpr int setAGC = 168;
  static constexpr int setAMFrontEndAgcControl = 169;
  static constexpr int setAutomaticGainControl = 170;
  static constexpr int setBandwidth = 171;
  static constexpr int setProperty = 172;
  static constexpr int setRefClockPrescaler = 173;
  static constexpr int setSeekAmLimits = 174;
  static constexpr int setSeekFmLimits = 175;

  // Lists
  static constexpr int digitalOutputFormat = 176;
  static constexpr int getCurrentReceivedSignalQuality = 177;
  static constexpr int getRdsStatus = 178;
  static constexpr int setAM = 179;
  static constexpr int setAmNoiseBlank = 180;
  static constexpr int setAvcAmMaxGain = 181;
  static constexpr int setFM = 182;
  static constexpr int setFmNoiseBlank = 183;
  static constexpr int setGpio = 184;
  static constexpr int setGpioCtl = 185;
  static constexpr int setGpioIen = 186;
  static constexpr int setNBFM = 187;
  static constexpr int setPowerUp = 188;
  static constexpr int setRdsConfig = 189;
  static constexpr int setRdsIntSource = 190;
  static constexpr int setSSB = 191;
  static constexpr int setSSBConfig = 192;
  static constexpr int setSsbAgcOverrite = 193;
  static constexpr int setup = 194;
}

namespace iota
{
  // Effect: SI4735
  // Effect: SI4735: Nilads
  inline Storage RdsInit = NiladicEffect::make(effects::families::SI4735, effects::SI4735::RdsInit);
  inline Storage analogPowerUp = NiladicEffect::make(effects::families::SI4735, effects::SI4735::analogPowerUp);
  inline Storage clearRdsBuffer = NiladicEffect::make(effects::families::SI4735, effects::SI4735::clearRdsBuffer);
  inline Storage frequencyDown = NiladicEffect::make(effects::families::SI4735, effects::SI4735::frequencyDown);
  inline Storage frequencyUp = NiladicEffect::make(effects::families::SI4735, effects::SI4735::frequencyUp);
  inline Storage getAutomaticGainControl = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getAutomaticGainControl);
  inline Storage getFirmware = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getFirmware);
  inline Storage getStatus = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getStatus);
  inline Storage patchPowerUp = NiladicEffect::make(effects::families::SI4735, effects::SI4735::patchPowerUp);
  inline Storage patchPowerUpNBFM = NiladicEffect::make(effects::families::SI4735, effects::SI4735::patchPowerUpNBFM);
  inline Storage powerDown = NiladicEffect::make(effects::families::SI4735, effects::SI4735::powerDown);
  inline Storage radioPowerUp = NiladicEffect::make(effects::families::SI4735, effects::SI4735::radioPowerUp);
  inline Storage rdsBeginQuery = NiladicEffect::make(effects::families::SI4735, effects::SI4735::rdsBeginQuery);
  inline Storage rdsClearFifo = NiladicEffect::make(effects::families::SI4735, effects::SI4735::rdsClearFifo);
  inline Storage rdsClearInterrupt = NiladicEffect::make(effects::families::SI4735, effects::SI4735::rdsClearInterrupt);
  inline Storage reset = NiladicEffect::make(effects::families::SI4735, effects::SI4735::reset);
  inline Storage resetEndIndicatorGroupA = NiladicEffect::make(effects::families::SI4735, effects::SI4735::resetEndIndicatorGroupA);
  inline Storage resetEndIndicatorGroupB = NiladicEffect::make(effects::families::SI4735, effects::SI4735::resetEndIndicatorGroupB);
  inline Storage seekNextStation = NiladicEffect::make(effects::families::SI4735, effects::SI4735::seekNextStation);
  inline Storage seekPreviousStation = NiladicEffect::make(effects::families::SI4735, effects::SI4735::seekPreviousStation);
  inline Storage seekStationDown = NiladicEffect::make(effects::families::SI4735, effects::SI4735::seekStationDown);
  inline Storage seekStationUp = NiladicEffect::make(effects::families::SI4735, effects::SI4735::seekStationUp);
  inline Storage setAvcAmDefaultGain = NiladicEffect::make(effects::families::SI4735, effects::SI4735::setAvcAmDefaultGain);
  inline Storage setAvcAmMinGain = NiladicEffect::make(effects::families::SI4735, effects::SI4735::setAvcAmMinGain);
  inline Storage setFmStereoOff = NiladicEffect::make(effects::families::SI4735, effects::SI4735::setFmStereoOff);
  inline Storage setFmStereoOn = NiladicEffect::make(effects::families::SI4735, effects::SI4735::setFmStereoOn);
  inline Storage setFrequencyDown = NiladicEffect::make(effects::families::SI4735, effects::SI4735::setFrequencyDown);
  inline Storage setFrequencyUp = NiladicEffect::make(effects::families::SI4735, effects::SI4735::setFrequencyUp);
  inline Storage setI2CFastMode = NiladicEffect::make(effects::families::SI4735, effects::SI4735::setI2CFastMode);
  inline Storage setI2CLowSpeedMode = NiladicEffect::make(effects::families::SI4735, effects::SI4735::setI2CLowSpeedMode);
  inline Storage setI2CStandardMode = NiladicEffect::make(effects::families::SI4735, effects::SI4735::setI2CStandardMode);
  inline Storage setVolumeDown = NiladicEffect::make(effects::families::SI4735, effects::SI4735::setVolumeDown);
  inline Storage setVolumeUp = NiladicEffect::make(effects::families::SI4735, effects::SI4735::setVolumeUp);
  inline Storage ssbPowerUp = NiladicEffect::make(effects::families::SI4735, effects::SI4735::ssbPowerUp);
  inline Storage volumeDown = NiladicEffect::make(effects::families::SI4735, effects::SI4735::volumeDown);
  inline Storage volumeUp = NiladicEffect::make(effects::families::SI4735, effects::SI4735::volumeUp);
  inline Storage waitToSend = NiladicEffect::make(effects::families::SI4735, effects::SI4735::waitToSend);
  inline Storage getACFIndicator = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getACFIndicator);
  inline Storage getAgcGainIndex = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getAgcGainIndex);
  inline Storage getAntennaTuningCapacitor = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getAntennaTuningCapacitor);
  inline Storage getBandLimit = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getBandLimit);
  inline Storage getCurrentAfcRailIndicator = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getCurrentAfcRailIndicator);
  inline Storage getCurrentAvcAmMaxGain = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getCurrentAvcAmMaxGain);
  inline Storage getCurrentBlendDetectInterrupt = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getCurrentBlendDetectInterrupt);
  inline Storage getCurrentFrequency = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getCurrentFrequency);
  inline Storage getCurrentMultipath = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getCurrentMultipath);
  inline Storage getCurrentMultipathDetectHigh = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getCurrentMultipathDetectHigh);
  inline Storage getCurrentMultipathDetectLow = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getCurrentMultipathDetectLow);
  inline Storage getCurrentPilot = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getCurrentPilot);
  inline Storage getCurrentRSSI = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getCurrentRSSI);
  inline Storage getCurrentRssiDetectHigh = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getCurrentRssiDetectHigh);
  inline Storage getCurrentRssiDetectLow = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getCurrentRssiDetectLow);
  inline Storage getCurrentSNR = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getCurrentSNR);
  inline Storage getCurrentSignedFrequencyOffset = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getCurrentSignedFrequencyOffset);
  inline Storage getCurrentSnrDetectHigh = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getCurrentSnrDetectHigh);
  inline Storage getCurrentSnrDetectLow = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getCurrentSnrDetectLow);
  inline Storage getCurrentSoftMuteIndicator = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getCurrentSoftMuteIndicator);
  inline Storage getCurrentStereoBlend = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getCurrentStereoBlend);
  inline Storage getCurrentValidChannel = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getCurrentValidChannel);
  inline Storage getCurrentVolume = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getCurrentVolume);
  inline Storage getEndIndicatorGroupA = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getEndIndicatorGroupA);
  inline Storage getEndIndicatorGroupB = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getEndIndicatorGroupB);
  inline Storage getFirmwareCHIPREV = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getFirmwareCHIPREV);
  inline Storage getFirmwareCMPMAJOR = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getFirmwareCMPMAJOR);
  inline Storage getFirmwareCMPMINOR = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getFirmwareCMPMINOR);
  inline Storage getFirmwareFWMAJOR = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getFirmwareFWMAJOR);
  inline Storage getFirmwareFWMINOR = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getFirmwareFWMINOR);
  inline Storage getFirmwarePATCHH = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getFirmwarePATCHH);
  inline Storage getFirmwarePATCHL = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getFirmwarePATCHL);
  inline Storage getFirmwarePN = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getFirmwarePN);
  inline Storage getFrequency = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getFrequency);
  inline Storage getGroupLost = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getGroupLost);
  inline Storage getNumRdsFifoUsed = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getNumRdsFifoUsed);
  inline Storage getRadioDataSystemInterrupt = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getRadioDataSystemInterrupt);
  inline Storage getRdsFlagAB = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getRdsFlagAB);
  inline Storage getRdsGroupType = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getRdsGroupType);
  inline Storage getRdsNewBlockA = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getRdsNewBlockA);
  inline Storage getRdsNewBlockB = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getRdsNewBlockB);
  inline Storage getRdsPI = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getRdsPI);
  inline Storage getRdsProgramType = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getRdsProgramType);
  inline Storage getRdsReceived = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getRdsReceived);
  inline Storage getRdsSync = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getRdsSync);
  inline Storage getRdsSyncFound = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getRdsSyncFound);
  inline Storage getRdsSyncLost = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getRdsSyncLost);
  inline Storage getRdsTextSegmentAddress = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getRdsTextSegmentAddress);
  inline Storage getRdsVersionCode = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getRdsVersionCode);
  inline Storage getReceivedSignalStrengthIndicator = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getReceivedSignalStrengthIndicator);
  inline Storage getSignalQualityInterrupt = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getSignalQualityInterrupt);
  inline Storage getStatusCTS = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getStatusCTS);
  inline Storage getStatusError = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getStatusError);
  inline Storage getStatusMULT = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getStatusMULT);
  inline Storage getStatusSNR = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getStatusSNR);
  inline Storage getStatusValid = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getStatusValid);
  inline Storage getTuneCompleteTriggered = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getTuneCompleteTriggered);
  inline Storage getTuneFrequecyFast = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getTuneFrequecyFast);
  inline Storage getTuneFrequecyFreeze = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getTuneFrequecyFreeze);
  inline Storage getVolume = NiladicEffect::make(effects::families::SI4735, effects::SI4735::getVolume);
  inline Storage isAgcEnabled = NiladicEffect::make(effects::families::SI4735, effects::SI4735::isAgcEnabled);
  inline Storage isCurrentTuneAM = NiladicEffect::make(effects::families::SI4735, effects::SI4735::isCurrentTuneAM);
  inline Storage isCurrentTuneFM = NiladicEffect::make(effects::families::SI4735, effects::SI4735::isCurrentTuneFM);
  inline Storage isCurrentTuneSSB = NiladicEffect::make(effects::families::SI4735, effects::SI4735::isCurrentTuneSSB);

  // Effect: SI4735: Monads
  inline Storage digitalOutputSampleRate = MonadicEffect::make(effects::families::SI4735, effects::SI4735::digitalOutputSampleRate);
  inline Storage setAMDeEmphasis = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setAMDeEmphasis);
  inline Storage setAMSoftMuteAttackRate = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setAMSoftMuteAttackRate);
  inline Storage setAMSoftMuteRate = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setAMSoftMuteRate);
  inline Storage setAMSoftMuteReleaseRate = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setAMSoftMuteReleaseRate);
  inline Storage setAMSoftMuteSlop = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setAMSoftMuteSlop);
  inline Storage setAMSoftMuteSnrThreshold = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setAMSoftMuteSnrThreshold);
  inline Storage setAmAgcAttackRate = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setAmAgcAttackRate);
  inline Storage setAmAgcReleaseRate = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setAmAgcReleaseRate);
  inline Storage setAmDelayNB = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setAmDelayNB);
  inline Storage setAmSoftMuteMaxAttenuation = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setAmSoftMuteMaxAttenuation);
  inline Storage setAudioMode = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setAudioMode);
  inline Storage setAudioMute = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setAudioMute);
  inline Storage setDeviceI2CAddress = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setDeviceI2CAddress);
  inline Storage setDeviceOtherI2CAddress = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setDeviceOtherI2CAddress);
  inline Storage setFMDeEmphasis = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setFMDeEmphasis);
  inline Storage setFifoCount = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setFifoCount);
  inline Storage setFmBLendRssiMonoThreshold = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setFmBLendRssiMonoThreshold);
  inline Storage setFmBLendSnrMonoThreshold = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setFmBLendSnrMonoThreshold);
  inline Storage setFmBandwidth = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setFmBandwidth);
  inline Storage setFmBlendMonoThreshold = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setFmBlendMonoThreshold);
  inline Storage setFmBlendMultiPathMonoThreshold = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setFmBlendMultiPathMonoThreshold);
  inline Storage setFmBlendMultiPathStereoThreshold = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setFmBlendMultiPathStereoThreshold);
  inline Storage setFmBlendRssiStereoThreshold = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setFmBlendRssiStereoThreshold);
  inline Storage setFmBlendSnrStereoThreshold = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setFmBlendSnrStereoThreshold);
  inline Storage setFmBlendStereoThreshold = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setFmBlendStereoThreshold);
  inline Storage setFmNoiseBlankDelay = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setFmNoiseBlankDelay);
  inline Storage setFmNoiseBlankInterval = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setFmNoiseBlankInterval);
  inline Storage setFmNoiseBlankRate = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setFmNoiseBlankRate);
  inline Storage setFmNoiseBlankThreshold = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setFmNoiseBlankThreshold);
  inline Storage setFmNoiseBlank_IIR_Filter = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setFmNoiseBlank_IIR_Filter);
  inline Storage setFmSoftMuteMaxAttenuation = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setFmSoftMuteMaxAttenuation);
  inline Storage setFrequencyNBFM = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setFrequencyNBFM);
  inline Storage setFrequencyStep = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setFrequencyStep);
  inline Storage setHardwareAudioMute = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setHardwareAudioMute);
  inline Storage setMaxDelayPowerUp = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setMaxDelayPowerUp);
  inline Storage setMaxDelaySetFrequency = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setMaxDelaySetFrequency);
  inline Storage setRefClock = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setRefClock);
  inline Storage setSBBSidebandCutoffFilter = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setSBBSidebandCutoffFilter);
  inline Storage setSSBAudioBandwidth = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setSSBAudioBandwidth);
  inline Storage setSSBAutomaticVolumeControl = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setSSBAutomaticVolumeControl);
  inline Storage setSSBAvcDivider = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setSSBAvcDivider);
  inline Storage setSSBBfo = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setSSBBfo);
  inline Storage setSSBDspAfc = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setSSBDspAfc);
  inline Storage setSSBSidebandCutoffFilter = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setSSBSidebandCutoffFilter);
  inline Storage setSSBSoftMute = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setSSBSoftMute);
  inline Storage setSeekAmRssiThreshold = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setSeekAmRssiThreshold);
  inline Storage setSeekAmSNRThreshold = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setSeekAmSNRThreshold);
  inline Storage setSeekAmSpacing = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setSeekAmSpacing);
  inline Storage setSeekAmSrnThreshold = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setSeekAmSrnThreshold);
  inline Storage setSeekFmRssiThreshold = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setSeekFmRssiThreshold);
  inline Storage setSeekFmSNRThreshold = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setSeekFmSNRThreshold);
  inline Storage setSeekFmSpacing = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setSeekFmSpacing);
  inline Storage setSeekFmSrnThreshold = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setSeekFmSrnThreshold);
  inline Storage setSsbAgcAttackRate = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setSsbAgcAttackRate);
  inline Storage setSsbAgcReleaseRate = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setSsbAgcReleaseRate);
  inline Storage setSsbIfAgcAttackRate = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setSsbIfAgcAttackRate);
  inline Storage setSsbIfAgcReleaseRate = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setSsbIfAgcReleaseRate);
  inline Storage setSsbSoftMuteMaxAttenuation = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setSsbSoftMuteMaxAttenuation);
  inline Storage setTuneFrequencyAntennaCapacitor = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setTuneFrequencyAntennaCapacitor);
  inline Storage setTuneFrequencyFast = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setTuneFrequencyFast);
  inline Storage setTuneFrequencyFreze = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setTuneFrequencyFreze);
  inline Storage setVolume = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setVolume);
  inline Storage getDeviceI2CAddress = MonadicEffect::make(effects::families::SI4735, effects::SI4735::getDeviceI2CAddress);
  inline Storage getProperty = MonadicEffect::make(effects::families::SI4735, effects::SI4735::getProperty);

  // Effect: SI4735: Dyads
  inline Storage seekStation = DyadicEffect::make(effects::families::SI4735, effects::SI4735::seekStation);
  inline Storage setAGC = DyadicEffect::make(effects::families::SI4735, effects::SI4735::setAGC);
  inline Storage setAMFrontEndAgcControl = DyadicEffect::make(effects::families::SI4735, effects::SI4735::setAMFrontEndAgcControl);
  inline Storage setAutomaticGainControl = DyadicEffect::make(effects::families::SI4735, effects::SI4735::setAutomaticGainControl);
  inline Storage setBandwidth = DyadicEffect::make(effects::families::SI4735, effects::SI4735::setBandwidth);
  inline Storage setProperty = DyadicEffect::make(effects::families::SI4735, effects::SI4735::setProperty);
  inline Storage setRefClockPrescaler = DyadicEffect::make(effects::families::SI4735, effects::SI4735::setRefClockPrescaler);
  inline Storage setSeekAmLimits = DyadicEffect::make(effects::families::SI4735, effects::SI4735::setSeekAmLimits);
  inline Storage setSeekFmLimits = DyadicEffect::make(effects::families::SI4735, effects::SI4735::setSeekFmLimits);

  // Effect: SI4735: Lists
  inline Storage digitalOutputFormat = MonadicEffect::make(effects::families::SI4735, effects::SI4735::digitalOutputFormat);
  inline Storage getCurrentReceivedSignalQuality = MonadicEffect::make(effects::families::SI4735, effects::SI4735::getCurrentReceivedSignalQuality);
  inline Storage getRdsStatus = MonadicEffect::make(effects::families::SI4735, effects::SI4735::getRdsStatus);
  inline Storage setAM = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setAM);
  inline Storage setAmNoiseBlank = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setAmNoiseBlank);
  inline Storage setAvcAmMaxGain = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setAvcAmMaxGain);
  inline Storage setFM = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setFM);
  inline Storage setFmNoiseBlank = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setFmNoiseBlank);
  inline Storage setGpio = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setGpio);
  inline Storage setGpioCtl = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setGpioCtl);
  inline Storage setGpioIen = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setGpioIen);
  inline Storage setNBFM = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setNBFM);
  inline Storage setPowerUp = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setPowerUp);
  inline Storage setRdsConfig = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setRdsConfig);
  inline Storage setRdsIntSource = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setRdsIntSource);
  inline Storage setSSB = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setSSB);
  inline Storage setSSBConfig = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setSSBConfig);
  inline Storage setSsbAgcOverrite = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setSsbAgcOverrite);
  inline Storage setup = MonadicEffect::make(effects::families::SI4735, effects::SI4735::setup);
}

class IotaSI4735
{
  public:
    static void initialize(EffectsProvider* effects_register, SI4735* instance);

    // Nilads
    static Storage RdsInit();
    static Storage analogPowerUp();
    static Storage clearRdsBuffer();
    static Storage frequencyDown();
    static Storage frequencyUp();
    static Storage getAutomaticGainControl();
    static Storage getFirmware();
    static Storage getStatus();
    static Storage patchPowerUp();
    static Storage patchPowerUpNBFM();
    static Storage powerDown();
    static Storage radioPowerUp();
    static Storage rdsBeginQuery();
    static Storage rdsClearFifo();
    static Storage rdsClearInterrupt();
    static Storage reset();
    static Storage resetEndIndicatorGroupA();
    static Storage resetEndIndicatorGroupB();
    static Storage seekNextStation();
    static Storage seekPreviousStation();
    static Storage seekStationDown();
    static Storage seekStationUp();
    static Storage setAvcAmDefaultGain();
    static Storage setAvcAmMinGain();
    static Storage setFmStereoOff();
    static Storage setFmStereoOn();
    static Storage setFrequencyDown();
    static Storage setFrequencyUp();
    static Storage setI2CFastMode();
    static Storage setI2CLowSpeedMode();
    static Storage setI2CStandardMode();
    static Storage setVolumeDown();
    static Storage setVolumeUp();
    static Storage ssbPowerUp();
    static Storage volumeDown();
    static Storage volumeUp();
    static Storage waitToSend();
    static Storage getACFIndicator();
    static Storage getAgcGainIndex();
    static Storage getAntennaTuningCapacitor();
    static Storage getBandLimit();
    static Storage getCurrentAfcRailIndicator();
    static Storage getCurrentAvcAmMaxGain();
    static Storage getCurrentBlendDetectInterrupt();
    static Storage getCurrentFrequency();
    static Storage getCurrentMultipath();
    static Storage getCurrentMultipathDetectHigh();
    static Storage getCurrentMultipathDetectLow();
    static Storage getCurrentPilot();
    static Storage getCurrentRSSI();
    static Storage getCurrentRssiDetectHigh();
    static Storage getCurrentRssiDetectLow();
    static Storage getCurrentSNR();
    static Storage getCurrentSignedFrequencyOffset();
    static Storage getCurrentSnrDetectHigh();
    static Storage getCurrentSnrDetectLow();
    static Storage getCurrentSoftMuteIndicator();
    static Storage getCurrentStereoBlend();
    static Storage getCurrentValidChannel();
    static Storage getCurrentVolume();
    static Storage getEndIndicatorGroupA();
    static Storage getEndIndicatorGroupB();
    static Storage getFirmwareCHIPREV();
    static Storage getFirmwareCMPMAJOR();
    static Storage getFirmwareCMPMINOR();
    static Storage getFirmwareFWMAJOR();
    static Storage getFirmwareFWMINOR();
    static Storage getFirmwarePATCHH();
    static Storage getFirmwarePATCHL();
    static Storage getFirmwarePN();
    static Storage getFrequency();
    static Storage getGroupLost();
    static Storage getNumRdsFifoUsed();
    static Storage getRadioDataSystemInterrupt();
    static Storage getRdsFlagAB();
    static Storage getRdsGroupType();
    static Storage getRdsNewBlockA();
    static Storage getRdsNewBlockB();
    static Storage getRdsPI();
    static Storage getRdsProgramType();
    static Storage getRdsReceived();
    static Storage getRdsSync();
    static Storage getRdsSyncFound();
    static Storage getRdsSyncLost();
    static Storage getRdsTextSegmentAddress();
    static Storage getRdsVersionCode();
    static Storage getReceivedSignalStrengthIndicator();
    static Storage getSignalQualityInterrupt();
    static Storage getStatusCTS();
    static Storage getStatusError();
    static Storage getStatusMULT();
    static Storage getStatusSNR();
    static Storage getStatusValid();
    static Storage getTuneCompleteTriggered();
    static Storage getTuneFrequecyFast();
    static Storage getTuneFrequecyFreeze();
    static Storage getVolume();
    static Storage isAgcEnabled();
    static Storage isCurrentTuneAM();
    static Storage isCurrentTuneFM();
    static Storage isCurrentTuneSSB();

    // Monads
    static Storage digitalOutputSampleRate(const Storage& i);
    static Storage setAMDeEmphasis(const Storage& i);
    static Storage setAMSoftMuteAttackRate(const Storage& i);
    static Storage setAMSoftMuteRate(const Storage& i);
    static Storage setAMSoftMuteReleaseRate(const Storage& i);
    static Storage setAMSoftMuteSlop(const Storage& i);
    static Storage setAMSoftMuteSnrThreshold(const Storage& i);
    static Storage setAmAgcAttackRate(const Storage& i);
    static Storage setAmAgcReleaseRate(const Storage& i);
    static Storage setAmDelayNB(const Storage& i);
    static Storage setAmSoftMuteMaxAttenuation(const Storage& i);
    static Storage setAudioMode(const Storage& i);
    static Storage setAudioMute(const Storage& i);
    static Storage setDeviceI2CAddress(const Storage& i);
    static Storage setDeviceOtherI2CAddress(const Storage& i);
    static Storage setFMDeEmphasis(const Storage& i);
    static Storage setFifoCount(const Storage& i);
    static Storage setFmBLendRssiMonoThreshold(const Storage& i);
    static Storage setFmBLendSnrMonoThreshold(const Storage& i);
    static Storage setFmBandwidth(const Storage& i);
    static Storage setFmBlendMonoThreshold(const Storage& i);
    static Storage setFmBlendMultiPathMonoThreshold(const Storage& i);
    static Storage setFmBlendMultiPathStereoThreshold(const Storage& i);
    static Storage setFmBlendRssiStereoThreshold(const Storage& i);
    static Storage setFmBlendSnrStereoThreshold(const Storage& i);
    static Storage setFmBlendStereoThreshold(const Storage& i);
    static Storage setFmNoiseBlankDelay(const Storage& i);
    static Storage setFmNoiseBlankInterval(const Storage& i);
    static Storage setFmNoiseBlankRate(const Storage& i);
    static Storage setFmNoiseBlankThreshold(const Storage& i);
    static Storage setFmNoiseBlank_IIR_Filter(const Storage& i);
    static Storage setFmSoftMuteMaxAttenuation(const Storage& i);
    static Storage setFrequencyNBFM(const Storage& i);
    static Storage setFrequencyStep(const Storage& i);
    static Storage setHardwareAudioMute(const Storage& i);
    static Storage setMaxDelayPowerUp(const Storage& i);
    static Storage setMaxDelaySetFrequency(const Storage& i);
    static Storage setRefClock(const Storage& i);
    static Storage setSBBSidebandCutoffFilter(const Storage& i);
    static Storage setSSBAudioBandwidth(const Storage& i);
    static Storage setSSBAutomaticVolumeControl(const Storage& i);
    static Storage setSSBAvcDivider(const Storage& i);
    static Storage setSSBBfo(const Storage& i);
    static Storage setSSBDspAfc(const Storage& i);
    static Storage setSSBSidebandCutoffFilter(const Storage& i);
    static Storage setSSBSoftMute(const Storage& i);
    static Storage setSeekAmRssiThreshold(const Storage& i);
    static Storage setSeekAmSNRThreshold(const Storage& i);
    static Storage setSeekAmSpacing(const Storage& i);
    static Storage setSeekAmSrnThreshold(const Storage& i);
    static Storage setSeekFmRssiThreshold(const Storage& i);
    static Storage setSeekFmSNRThreshold(const Storage& i);
    static Storage setSeekFmSpacing(const Storage& i);
    static Storage setSeekFmSrnThreshold(const Storage& i);
    static Storage setSsbAgcAttackRate(const Storage& i);
    static Storage setSsbAgcReleaseRate(const Storage& i);
    static Storage setSsbIfAgcAttackRate(const Storage& i);
    static Storage setSsbIfAgcReleaseRate(const Storage& i);
    static Storage setSsbSoftMuteMaxAttenuation(const Storage& i);
    static Storage setTuneFrequencyAntennaCapacitor(const Storage& i);
    static Storage setTuneFrequencyFast(const Storage& i);
    static Storage setTuneFrequencyFreze(const Storage& i);
    static Storage setVolume(const Storage& i);
    static Storage getDeviceI2CAddress(const Storage& i);
    static Storage getProperty(const Storage& i);

    // Dyads
    static Storage seekStation(const Storage& i, const Storage& x);
    static Storage setAGC(const Storage& i, const Storage& x);
    static Storage setAMFrontEndAgcControl(const Storage& i, const Storage& x);
    static Storage setAutomaticGainControl(const Storage& i, const Storage& x);
    static Storage setBandwidth(const Storage& i, const Storage& x);
    static Storage setProperty(const Storage& i, const Storage& x);
    static Storage setRefClockPrescaler(const Storage& i, const Storage& x);
    static Storage setSeekAmLimits(const Storage& i, const Storage& x);
    static Storage setSeekFmLimits(const Storage& i, const Storage& x);

    // Lists
    static Storage digitalOutputFormat(const Storage& i);
    static Storage getCurrentReceivedSignalQuality(const Storage& i);
    static Storage getRdsStatus(const Storage& i);
    static Storage setAM(const Storage& i);
    static Storage setAmNoiseBlank(const Storage& i);
    static Storage setAvcAmMaxGain(const Storage& i);
    static Storage setFM(const Storage& i);
    static Storage setFmNoiseBlank(const Storage& i);
    static Storage setGpio(const Storage& i);
    static Storage setGpioCtl(const Storage& i);
    static Storage setGpioIen(const Storage& i);
    static Storage setNBFM(const Storage& i);
    static Storage setPowerUp(const Storage& i);
    static Storage setRdsConfig(const Storage& i);
    static Storage setRdsIntSource(const Storage& i);
    static Storage setSSB(const Storage& i);
    static Storage setSSBConfig(const Storage& i);
    static Storage setSsbAgcOverrite(const Storage& i);
    static Storage setup(const Storage& i);

  private:
    static SI4735* instance;
};

#endif //IOTA_SI4735_H
